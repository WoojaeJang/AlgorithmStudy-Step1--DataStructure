# 2주차 - 완전탐색/이분탐색

## [✍ 강의 정리]

### PART 01 탐색

#### 탐색(검색)이란?
- 많은 데이터 속에서 원하는 데이터를 찾는것
- 웹에서 특정 문자를 가진 웹 문서를 찾거나 신용카드나 버스카드 역시 검색 알고리즘을 사용

<br/>

#### 탐색의 종류
- 완전탐색 🔥
- 이분탐색 🔥
- 깊이우선탐색 🔥
- 너비우선탐색 🔥
- 문자열탐색
- KMP
- BM

<br/>

### PART 02 완전탐색

#### 완전탐색이란?
- 컴퓨터의 빠른 계산 성능을 활용하여 가능한 모든 경우의 수를 탐색
- 효율성 관점에서 최악의 방법
- 부르트 포스(Brute Force)라고도 불림
- 풀리지 않는 문제가 없다는 장점

<br/>

#### 완전탐색 구현방법
- 반복문
- 재귀함수
	- 동적 계획법
	- 백트래킹
	- 탐욕법

<br/>

#### 완전탐색 - 반복문
예를 들어
trump = [ 9, A, K, 8, 7, 3, 2, Q ]
에서 '8'을 찾는다고 하자

- 랜덤으로 하나씩 확인해 볼 경우 
	- 카드의 수가 적다면 상관이 없지만
	- 카드의 수가 매우 많다면 어떤것을 확인했고 안했는지 기억하기 매우 어렵다.

- 따라서 순서대로 하나씩 확인해 본다

<br/>

#### 완전탐색 - 반복문 구현
```python
def solution(trump) :
	for i in range(len(trump)) :
		if trump[i] == 8 :
			return i
	return -1
```

<br/>

#### 완전탐색 - 재귀함수 구현
```python
def solution(trump, loc) :
	if trump[loc] == 8 :
		return loc
	else :
		return solution(trump, loc+1)
```

<br/>

### PART 03 이분탐색

#### 예시 - UPDOWN 게임
1 ~ 1000 
(기회는 8번)

500 선택

-> UP

501 ~ 10000
(기회는 7번)

750 선택

...

보통 범위를 점차 좁혀나간다

<br/>

#### 이분탐색이란?
- 오름차순으로 정렬된 리스트에서 특정 값의 위치를 찾는 알고리즘
- 중간의 값을 선택하여 찾고자 하는 값과의 크고 작음을 비교하는 방법
- 이진검색이라고도 표현

#### 이분탐색구조
예를 들어
trump = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
에서 '8'을 찾는다고 하자

1) left = 1 | right = 9 | mid = (left + right)/2 = 5
